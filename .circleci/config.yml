# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  terraform: circleci/terraform@3.1.0

commands:
  destroy-environment:
    description: Destory backend / frontend cloudformation  & s3 bucket on fail
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destory environments
          when: on_fail
          command: |
            echo "Destroying environments: << parameters.workflow_id >>"
            # aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >> --region us-east-1
            # aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >> --region us-east-1

tf-docker-image: &tf-docker-image
   docker:
      #- image: circleci/terraform@3.1.0
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light

node-docker-image: &node-docker-image
   docker:
      - image: circleci/node:13.8.0

aws-docker-image: &aws-docker-image
   docker:
      - image: cimg/aws:2023.01

ansible-docker-image: &ansible-docker-image
   docker:
      - image: cimg/deploy:2022.11.1

python-docker-image: &python-docker-image
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/project
    environment:
      TF_IN_AUTOMATION: true

tf-install: &tf-install
  run:
    name: tf-install
    command: |
      wget https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip
      sudo unzip terraform_1.3.6_linux_amd64.zip -d /usr/bin
      rm terraform_1.3.6_linux_amd64.zip
      terraform --version

jobs:
  build-out:
    <<: *python-docker-image
    working_directory: ~/repo
    steps:
      - checkout
      #  Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  terraform-init:
    <<: *python-docker-image
    steps:
      - checkout
      - *tf-install
      - restore_cache:
          keys:
            - terra-dependencies-{{ checksum ".circleci/files/main.tf" }}
      - run:
          name: init
          command: |
            cd .circleci/files
            terraform init -input=false
      - persist_to_workspace:
          root: ~/
          paths:
            - .

  deploy-infra:
    <<: *aws-docker-image
    steps:
      - checkout
      - run:
          name: cloudformation ec2 deploy
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-2
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Query EC2 instances in the backend using the workflowID and export the IP address to ansible/inventory
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --region us-east-2 \
              --output text >> .circleci/ansible/inventory.txt
            echo `cat .circleci/ansible/inventory.txt`
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    <<: *ansible-docker-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "df:d4:27:43:6f:dc:01:ea:99:ec:ab:03:34:a3:60:38"
      - attach_workspace:      # attach workspace!
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            echo AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} >> ".env"
            echo AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} >> ".env"
            cat .env
            pwd
            ls
            echo `cat inventory.txt`
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/.env            

workflows:
  build-and-test:
    jobs:
      - build-out
      - tf-deploy-eks:
          requires:
            - build-out
      - deploy-infra:
          requires:
            - tf-deploy-eks
      - configure-infrastructure:
          requires:
            - deploy-infra